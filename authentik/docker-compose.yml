---
version: "3.4"

services:
  postgresql:
    image: docker.io/library/postgres:12-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      PG_PASS: $PG_PASS
      POSTGRES_PASSWORD: $PG_PASS
      POSTGRES_USER: $PG_USER
      POSTGRES_DB: authentikdb
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
  server:
    image: ghcr.io/goauthentik/server
    restart: unless-stopped
    command: server
    environment:
      PG_PASS: $PG_PASS
      AUTHENTIK_SECRET_KEY: $AUTHENTIK_SECRET_KEY
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: $PG_USER
      AUTHENTIK_POSTGRESQL__NAME: authentikdb
      AUTHENTIK_POSTGRESQL__PASSWORD: $PG_PASS
      # SMTP Host Emails are sent to
      AUTHENTIK_EMAIL__HOST: $SMTPHOST
      AUTHENTIK_EMAIL__PORT: $SMTPPORT
      # Optionally authenticate (don't add quotation marks to your password)
      AUTHENTIK_EMAIL__USERNAME: $SMTPNAME
      AUTHENTIK_EMAIL__PASSWORD: $SMTPPASSWORD
      # Use StartTLS
      AUTHENTIK_EMAIL__USE_TLS: false
      # Use SSL
      AUTHENTIK_EMAIL__USE_SSL: true
      AUTHENTIK_EMAIL__TIMEOUT: 30
      # Email address authentik will send from, should have a correct @domain
      AUTHENTIK_EMAIL__FROM: serveradmin@gmail.com
    volumes:
      - media:/media
      - custom-templates:/templates
    ports:
      - "9090:9000"
      - "9443:9443"
    depends_on:
      - postgresql
      - redis
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  worker:
    image: ghcr.io/goauthentik/server
    restart: unless-stopped
    command: worker
    environment:
      PG_PASS: $PG_PASS
      AUTHENTIK_SECRET_KEY: $AUTHENTIK_SECRET_KEY
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: $PG_USER
      AUTHENTIK_POSTGRESQL__NAME: authentikdb
      AUTHENTIK_POSTGRESQL__PASSWORD: $PG_PASS
      # SMTP Host Emails are sent to
      AUTHENTIK_EMAIL__HOST: $SMTPHOST
      AUTHENTIK_EMAIL__PORT: $SMTPPORT
      # Optionally authenticate (don't add quotation marks to your password)
      AUTHENTIK_EMAIL__USERNAME: $SMTPNAME
      AUTHENTIK_EMAIL__PASSWORD: $SMTPPASSWORD
      # Use StartTLS
      AUTHENTIK_EMAIL__USE_TLS: false
      # Use SSL
      AUTHENTIK_EMAIL__USE_SSL: true
      AUTHENTIK_EMAIL__TIMEOUT: 30
      # Email address authentik will send from, should have a correct @domain
      AUTHENTIK_EMAIL__FROM: serveradmin@gmail.com
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - media:/media
      - certs:/certs
      - custom-templates:/templates
    depends_on:
      - postgresql
      - redis
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

volumes:
  database:
    driver: local
  redis:
    driver: local
  media:
  custom-templates:
  certs:
